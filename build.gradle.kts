/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/custom_plugins.html
 */

group = "com.gemnasium"
version = "1.0.4"

plugins {
    kotlin("jvm") version libs.versions.kotlin
    id("java-gradle-plugin")
    alias(libs.plugins.gradle.publish)
    id("maven-publish")
    `jvm-test-suite`
    `java-test-fixtures`
    id("jacoco")
    // Broken for Gradle 7, see https://github.com/ksoichiro/gradle-console-reporter/issues/15
    // id("com.github.ksoichiro.console.reporter") version "0.6.2"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib"))
    implementation(gradleApi())
    implementation(gradleKotlinDsl())
    api(libs.jackson.databind)
}

fun checkAndSetProperty( prop: String, value: String? ){
    if (value != null) {
        project.extra[prop] = value
    }
}

// Grab the gradle publish key and secret from environment variables if they're set.
checkAndSetProperty("gradle.publish.key", System.getenv("GRADLE_PUBLISH_KEY"))
checkAndSetProperty("gradle.publish.secret", System.getenv("GRADLE_PUBLISH_SECRET"))


gradlePlugin {
    plugins {
        website = "https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium-gradle-plugin"
        vcsUrl = "https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium-gradle-plugin.git"
        create("gemnasium-gradle-plugin") {
            id = "com.gemnasium.gradle-plugin"
            implementationClass = "com.gemnasium.GemnasiumGradlePlugin"
            displayName = "Gemnasium Gradle Plugin"
            description = "A Gradle plugin to produce a dependency report in JSON format that Gemnasium can use for a dependency vulnerability scan"
            tags = listOf("gemnasium", "dependency", "dependencies", "dependency-check", "security", "gitlab")

        }
    }
}



testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter(libs.versions.junit)
        }

        register<JvmTestSuite>("functionalTest") {

            testType = TestSuiteType.FUNCTIONAL_TEST

            dependencies {
                implementation(project())
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        withType(JvmTestSuite::class) {
            dependencies {
                implementation(testFixtures(project()))
                // Use the Kotlin test library.
                implementation(libs.kotlin.test)

                // Use the Kotlin JUnit integration.
                implementation(libs.kotlin.junit5)

                implementation(libs.kotest.runner)
            }
        }
    }
}

tasks.named("check") {
    dependsOn(testing.suites.named("functionalTest"))
}


gradlePlugin.testSourceSets(sourceSets.named("functionalTest").get())



// Broken for Gradle 7, see https://github.com/ksoichiro/gradle-console-reporter/issues/15
//tasks.named("reportCoverage") {
//    dependsOn("jacocoTestReport")
//}

publishing {
    publications {
        create<MavenPublication>("pluginMaven") {
            groupId = "com.gemnasium"
            artifactId = "gradle-plugin"

            //from(components["java"])
        }
    }
}
